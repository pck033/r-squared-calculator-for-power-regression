document.getElementById('calculator-form').addEventListener('submit', function(e) {
    e.preventDefault();

    // Get input values
    const xValues = document.getElementById('x-values').value.split(',').map(Number);
    const yValues = document.getElementById('y-values').value.split(',').map(Number);

    // Calculate equation and R-squared value
    const { equation, rSquared } = calculateEquationAndRSquared(xValues, yValues);

    // Display results
    document.getElementById('x-values-display').innerText = `X Values: ${xValues.join(', ')}`;
    document.getElementById('y-values-display').innerText = `Y Values: ${yValues.join(', ')}`;
    document.getElementById('equation').innerText = `Equation: ${equation}`;
    document.getElementById('r-squared').innerText = `R-squared: ${rSquared}`;

    // Plot graph
    plotGraph(xValues, yValues);
});

function calculateEquationAndRSquared(xValues, yValues) {
    // Calculate equation (assuming linear regression y = mx + b)
    const meanX = xValues.reduce((acc, val) => acc + val, 0) / xValues.length;
    const meanY = yValues.reduce((acc, val) => acc + val, 0) / yValues.length;

    const m = xValues.reduce((acc, val, index) => acc + ((val - meanX) * (yValues[index] - meanY)), 0)
        / xValues.reduce((acc, val) => acc + Math.pow(val - meanX, 2), 0);
    const b = meanY - m * meanX;

    const equation = `y = ${m.toFixed(2)}x + ${b.toFixed(2)}`;

    // Calculate R-squared value
    const yPredicted = xValues.map(x => m * x + b);
    const ssTotal = yValues.reduce((acc, val) => acc + Math.pow(val - meanY, 2), 0);
    const ssResidual = yValues.reduce((acc, val, index) => acc + Math.pow(val - yPredicted[index], 2), 0);
    const rSquared = 1 - (ssResidual / ssTotal);

    return { equation, rSquared };
}

function plotGraph(xValues, yValues) {
    const ctx = document.getElementById('myChart').getContext('2d');

    const chart = new Chart(ctx, {
        type: 'scatter',
        data: {
            datasets: [{
                label: 'Data Points',
                data: xValues.map((x, index) => ({ x, y: yValues[index] })),
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                x: {
                    type: 'linear',
                    position: 'bottom'
                },
                y: {
                    type: 'linear',
                    position: 'left'
                }
            }
        }
    });
}
